{
  "Commands": [
    {
      "Name": "Install-SqlServerPowerShellModule",
      "Arguments": {}
    },
    {
      "Name": "Disable-Firewall",
      "Arguments": {}
    },
    {
      "Name": "New-SqlServerSystemAccount",
      "Arguments": {
        "UserName": "$domainAdminAccountName",
        "PrimaryNode": "$primaryNode",
        "DomainName": "$domainName",
        "SQLServiceUserPassword": "$sqlServiceAccountPassword",
        "UserPassword": "$domainAdminAccountPassword",
        "SQLServiceUserName": "$sqlServiceAccountName"
      }
    },
    {
      "Name": "New-SharedFolderForAOAG",
      "Arguments": {
        "PrimaryNode": "$primaryNode"
      }
    }
  ],
  "Scripts": [
    "SW1wb3J0LU1vZHVsZSBDb3JlRnVuY3Rpb25zIC1Gb3JjZQ==",
    "",
    "CmZ1bmN0aW9uIE5ldy1TcWxTZXJ2ZXJTeXN0ZW1BY2NvdW50IHsKICAgIHBhcmFtICgKICAgICAgICAjIChSRVFVSVJFRCkgRG9tYWluIE5hbWUKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJERvbWFpbk5hbWUsCgogICAgICAgICMgKFJFUVVJUkVEKSBVc2VyIG5hbWUgd2hvIGhhcyBwZXJtaXNzaW9ucyB0byBjcmVhdGUgYW5kIG1vZGlmeSB1c2VyUGFzc3dvcmQKICAgICAgICAjIFVzdWFsbHkgdGhpcyBpcyB0aGUgZG9tYWluIGFkbWluaXN0cmF0b3IgJyRkb21haW5OYW1lXEFkbWluaXN0cmF0b3InIGFjY291bnQKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJFVzZXJOYW1lLAoKICAgICAgICAjIChSRVFVSVJFRCkgUGFzc3dvcmQgZm9yIHRoYXQgdXNlcgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkVXNlclBhc3N3b3JkLAoKICAgICAgICAjIChSRVFVSVJFRCkgVXNlciBuYW1lIGZvciBhIG5ldyBhY2NvdW50IHRoYXQgd2lsbCBiZSB1c2VkIHRvIHJ1biBTUUwgU2VydmVyCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRTUUxTZXJ2aWNlVXNlck5hbWUsCgogICAgICAgICMgKFJFUVVJUkVEKSBQYXNzd29yZCBmb3IgdGhhdCB1c2VyCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRTUUxTZXJ2aWNlVXNlclBhc3N3b3JkLAoKICAgICAgICBbU3RyaW5nXSAkUHJpbWFyeU5vZGUgPSAnICcKICAgICkKCiAgICBpZiAoJFByaW1hcnlOb2RlLlRvTG93ZXIoKSAtbmUgKCRFbnY6Q29tcHV0ZXJOYW1lKS5Ub0xvd2VyKCkpIHsKICAgICAgICBXcml0ZS1Mb2cgIlRIaXMgZnVuY3Rpb24gcnVucyBvbiBBT0FHIHByaW1hcnkgbm9kZSBvbmx5LiIKICAgICAgICBXcml0ZS1Mb2cgIkV4aXRpbmcuIgogICAgICAgIHJldHVybgogICAgfQoKICAgIGlmICgoR2V0LU1vZHVsZSAtTmFtZSAnQWN0aXZlRGlyZWN0b3J5JykgLWVxICRudWxsKSB7CiAgICAgICAgQWRkLVdpbmRvd3NGZWF0dXJlIFJTQVQtQUQtUG93ZXJTaGVsbAogICAgfQoKICAgIGlmICgoR2V0LU1vZHVsZSAtTmFtZSAnQWN0aXZlRGlyZWN0b3J5JykgLWVxICRudWxsKSB7CiAgICAgICAgdGhyb3cgIk1vZHVsZSAnQWN0aXZlRGlyZWN0b3J5JyBpcyBub3QgYXZhaWxhYmxlLiIKICAgIH0KCiAgICAkQ3JlZHMgPSBOZXctQ3JlZGVudGlhbCAtVXNlck5hbWUgIiREb21haW5OYW1lXCRVc2VyTmFtZSIgLVBhc3N3b3JkICIkVXNlclBhc3N3b3JkIgoKICAgICRudWxsID0gTmV3LUFEVXNlciBgCiAgICAgICAgLU5hbWUgJFNRTFNlcnZpY2VVc2VyTmFtZSBgCiAgICAgICAgLUFjY291bnRQYXNzd29yZCAkKENvbnZlcnRUby1TZWN1cmVTdHJpbmcgLVN0cmluZyAkU1FMU2VydmljZVVzZXJQYXNzd29yZCAtQXNQbGFpblRleHQgLUZvcmNlKSBgCiAgICAgICAgLUNyZWRlbnRpYWwgJENyZWRzCn0K"
  ]
}