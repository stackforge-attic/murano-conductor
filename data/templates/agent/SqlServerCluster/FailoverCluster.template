{
  "Commands": [
    {
      "Name": "New-FailoverCluster",
      "Arguments": {
        "UserName": "$domainAdminAccountName",
        "ClusterNodes": "$clusterNodes",
        "DomainName": "$domainName",
        "ClusterName": "$clusterName",
        "UserPassword": "$domainAdminAccountPassword",
        "StaticAddress": "$clusterIP"
      }
    },
    {
      "Name": "New-FailoverClusterSharedFolder",
      "Arguments": {
        "ClusterName": "$clusterName",
        "UserName": "$domainAdminAccountName",
        "UserPassword": "$domainAdminAccountPassword",
        "ShareServer": "$shareServer",
        "DomainName": "$domainName"
      }
    }
  ],
  "RebootOnCompletion": 0,
  "Scripts": [
    "SW1wb3J0LU1vZHVsZSBDb3JlRnVuY3Rpb25zIC1Gb3JjZQoKCmZ1bmN0aW9uIFNob3ctSW52b2NhdGlvbkluZm8gewogICAgcGFyYW0gKAogICAgICAgICRJbnZvY2F0aW9uLAogICAgICAgIFtTd2l0Y2hdICRFbmQKICAgICkKCiAgICBpZiAoJEVuZCkgewogICAgICAgIFdyaXRlLUxvZ0RlYnVnICI8L2Z1bmN0aW9uIG5hbWU9JyQoJEludm9jYXRpb24uTXlDb21tYW5kLk5hbWUpJz4iCiAgICB9CiAgICBlbHNlIHsKICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAiPGZ1bmN0aW9uIG5hbWU9JyQoJEludm9jYXRpb24uTXlDb21tYW5kLk5hbWUpJz4iCiAgICAgICAgV3JpdGUtTG9nRGVidWcgIjxwYXJhbT4iCiAgICAgICAgZm9yZWFjaCAoJFBhcmFtZXRlciBpbiAkSW52b2NhdGlvbi5NeUNvbW1hbmQuUGFyYW1ldGVycykgewogICAgICAgICAgICBmb3JlYWNoICgkS2V5IGluICRQYXJhbWV0ZXIuS2V5cykgewogICAgICAgICAgICAgICAgJFR5cGUgPSAkUGFyYW1ldGVyWyRLZXldLlBhcmFtZXRlclR5cGUuRnVsbE5hbWUKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRWYWx1ZSBpbiAkSW52b2NhdGlvbi5Cb3VuZFBhcmFtZXRlcnNbJEtleV0pIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAiWyRUeXBlXSAkS2V5ID0gJyRWYWx1ZSciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgV3JpdGUtTG9nRGVidWcgIjwvcGFyYW0+IgogICAgfQp9CgoKJFRyYXBIYW5kbGVyID0gewogICAgV3JpdGUtTG9nRXJyb3IgQCgiPGV4Y2VwdGlvbj4iLCAkXykgLUVudGlyZU9iamVjdAogICAgV3JpdGUtTG9nRXJyb3IgIjwvZXhjZXB0aW9uPiIKICAgIGJyZWFrCn0KCgp0cmFwIHsKICAgICYkVHJhcEhhbmRsZXIKfQoKJEVycm9yQWN0aW9uUHJlZmVyZW5jZSA9ICdTdG9wJwoKCjwjCiMgVXNhZ2UgZXhhbXBsZSBmb3IgU2hvdy1JbnZvY2F0aW9uSW5mbwoKZnVuY3Rpb24gTXlGdW5jdGlvbiB7CiAgICBwYXJhbSAoCiAgICAgICAgW1N0cmluZ10gJFZhbHVlMSwKICAgICAgICBbU3RyaW5nXSAkVmFsdWUyLAogICAgICAgIFtJbnRdICRJbnQxCiAgICApCiAgICBiZWdpbiB7CiAgICAgICAgU2hvdy1JbnZvY2F0aW9uSW5mbyAkTXlJbnZvY2F0aW9uCiAgICB9CiAgICBlbmQgewogICAgICAgIFNob3ctSW52b2NhdGlvbkluZm8gJE15SW52b2NhdGlvbiAtRW5kCiAgICB9CiAgICBwcm9jZXNzIHsKICAgICAgICB0cmFwIHsKICAgICAgICAgICAgJiRUcmFwSGFuZGxlcgogICAgICAgIH0KICAgICAgICAjIE1haW4gY29kZSBoZXJlCiAgICB9Cn0KIz4K",
    "CnRyYXAgewogICAgJiRUcmFwSGFuZGxlcgp9CgoKCmZ1bmN0aW9uIE5ldy1TcWxTZXJ2ZXJTeXN0ZW1BY2NvdW50IHsKICAgIHBhcmFtICgKICAgICAgICAjIChSRVFVSVJFRCkgRG9tYWluIE5hbWUKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJERvbWFpbk5hbWUsCgogICAgICAgICMgKFJFUVVJUkVEKSBVc2VyIG5hbWUgd2hvIGhhcyBwZXJtaXNzaW9ucyB0byBjcmVhdGUgYW5kIG1vZGlmeSB1c2VyUGFzc3dvcmQKICAgICAgICAjIFVzdWFsbHkgdGhpcyBpcyB0aGUgZG9tYWluIGFkbWluaXN0cmF0b3IgJyRkb21haW5OYW1lXEFkbWluaXN0cmF0b3InIGFjY291bnQKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJFVzZXJOYW1lLAoKICAgICAgICAjIChSRVFVSVJFRCkgUGFzc3dvcmQgZm9yIHRoYXQgdXNlcgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkVXNlclBhc3N3b3JkLAoKICAgICAgICAjIChSRVFVSVJFRCkgVXNlciBuYW1lIGZvciBhIG5ldyBhY2NvdW50IHRoYXQgd2lsbCBiZSB1c2VkIHRvIHJ1biBTUUwgU2VydmVyCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRTUUxTZXJ2aWNlVXNlck5hbWUsCgogICAgICAgICMgKFJFUVVJUkVEKSBQYXNzd29yZCBmb3IgdGhhdCB1c2VyCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRTUUxTZXJ2aWNlVXNlclBhc3N3b3JkLAoKICAgICAgICBbU3RyaW5nXSAkUHJpbWFyeU5vZGUgPSAnICcKICAgICkKICAgIGJlZ2luIHsKICAgICAgICBTaG93LUludm9jYXRpb25JbmZvICRNeUludm9jYXRpb24KICAgIH0KICAgIGVuZCB7CiAgICAgICAgU2hvdy1JbnZvY2F0aW9uSW5mbyAkTXlJbnZvY2F0aW9uIC1FbmQKICAgIH0KICAgIHByb2Nlc3MgewogICAgICAgIHRyYXAgewogICAgICAgICAgICAmJFRyYXBIYW5kbGVyCiAgICAgICAgfQoKICAgICAgICBpZiAoJFByaW1hcnlOb2RlLlRvTG93ZXIoKSAtbmUgKCRFbnY6Q29tcHV0ZXJOYW1lKS5Ub0xvd2VyKCkpIHsKICAgICAgICAgICAgV3JpdGUtTG9nICJUSGlzIGZ1bmN0aW9uIHJ1bnMgb24gQU9BRyBwcmltYXJ5IG5vZGUgb25seS4iCiAgICAgICAgICAgIFdyaXRlLUxvZyAiRXhpdGluZy4iCiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KCiAgICAgICAgV3JpdGUtTG9nICJJbnN0YWxsaW5nICdSU0FULUFELVBvd2VyU2hlbGwnIC4uLiAiCiAgICAgICAgQWRkLVdpbmRvd3NGZWF0dXJlIFJTQVQtQUQtUG93ZXJTaGVsbAoKICAgICAgICBJbXBvcnQtTW9kdWxlIEFjdGl2ZURpcmVjdG9yeQoKICAgICAgICAkQ3JlZHMgPSBOZXctQ3JlZGVudGlhbCAtVXNlck5hbWUgIiREb21haW5OYW1lXCRVc2VyTmFtZSIgLVBhc3N3b3JkICIkVXNlclBhc3N3b3JkIgoKICAgICAgICBXcml0ZS1Mb2cgIkFkZGluZyBuZXcgdXNlciAuLi4iCiAgICAgICAgJG51bGwgPSBOZXctQURVc2VyIGAKICAgICAgICAgICAgLU5hbWUgJFNRTFNlcnZpY2VVc2VyTmFtZSBgCiAgICAgICAgICAgIC1BY2NvdW50UGFzc3dvcmQgJChDb252ZXJ0VG8tU2VjdXJlU3RyaW5nIC1TdHJpbmcgJFNRTFNlcnZpY2VVc2VyUGFzc3dvcmQgLUFzUGxhaW5UZXh0IC1Gb3JjZSkgYAogICAgICAgICAgICAtQ3JlZGVudGlhbCAkQ3JlZHMgYAogICAgICAgICAgICAtRXJyb3JBY3Rpb24gJ1N0b3AnCiAgICB9Cn0K",
    "CnRyYXAgewogICAgJiRUcmFwSGFuZGxlcgp9CgoKCmZ1bmN0aW9uIFNlbGVjdC1DbGlYbWxCbG9jayB7CiAgICBwYXJhbSAoCiAgICAgICAgW1N0cmluZ10gJFBhdGgsCiAgICAgICAgW1N0cmluZ10gJE91dEZpbGUgPSBbSU8uUGF0aF06OkdldFRlbXBGaWxlTmFtZSgpCiAgICApCgogICAgJFRhZ0ZvdW5kID0gJGZhbHNlCiAgICBHZXQtQ29udGVudCAkUGF0aCB8CiAgICAgICAgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICBpZiAoJF8gLWVxICcjPCBDTElYTUwnKSB7CiAgICAgICAgICAgICAgICAkVGFnRm91bmQgPSAkdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkVGFnRm91bmQpIHsKICAgICAgICAgICAgICAgIEFkZC1Db250ZW50IC1QYXRoICRPdXRGaWxlIC1WYWx1ZSAkXwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgJE91dEZpbGUKfQoKCgpmdW5jdGlvbiBTdGFydC1Qb3dlclNoZWxsUHJvY2VzcyB7CiAgICBwYXJhbSAoCiAgICAgICAgW1N0cmluZ10gJENvbW1hbmQsCiAgICAgICAgJENyZWRlbnRpYWwgPSAkbnVsbCwKICAgICAgICBbU3dpdGNoXSAkSWdub3JlU3RkRXJyLAogICAgICAgIFtTd2l0Y2hdICROb0Jhc2U2NAogICAgKQogICAgYmVnaW4gewogICAgICAgIFNob3ctSW52b2NhdGlvbkluZm8gJE15SW52b2NhdGlvbgogICAgfQogICAgZW5kIHsKICAgICAgICBTaG93LUludm9jYXRpb25JbmZvICRNeUludm9jYXRpb24gLUVuZAogICAgfQogICAgcHJvY2VzcyB7CiAgICAgICAgdHJhcCB7CiAgICAgICAgICAgICYkVHJhcEhhbmRsZXIKICAgICAgICB9CgogICAgICAgICRTdGRPdXQgPSBbSU8uUGF0aF06OkdldFRlbXBGaWxlTmFtZSgpCiAgICAgICAgJFN0ZEVyciA9IFtJTy5QYXRoXTo6R2V0VGVtcEZpbGVOYW1lKCkKCiAgICAgICAgJEFyZ3VtZW50TGlzdCA9IEAoJy1PdXRwdXRGb3JtYXQnLCAnWE1MJykKCiAgICAgICAgaWYgKCROb0Jhc2U2NCkgewogICAgICAgICAgICAkVG1wU2NyaXB0ID0gW0lPLlBhdGhdOjpHZXRUZW1wRmlsZU5hbWUoKQogICAgICAgICAgICBSZW5hbWUtSXRlbSAtUGF0aCAiJFRtcFNjcmlwdCIgLU5ld05hbWUgIiRUbXBTY3JpcHQucHMxIiAtRm9yY2UKICAgICAgICAgICAgJFRtcFNjcmlwdCA9ICIkVG1wU2NyaXB0LnBzMSIKCiAgICAgICAgICAgIFdyaXRlLUxvZ0RlYnVnICRUbXBTY3JpcHQKCiAgICAgICAgICAgICRDb21tYW5kIHwgT3V0LUZpbGUgJFRtcFNjcmlwdAoKICAgICAgICAgICAgJEFyZ3VtZW50TGlzdCArPSBAKCctRmlsZScsICIkVG1wU2NyaXB0IikKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRCeXRlcyA9IFtUZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRCeXRlcygkQ29tbWFuZCkKICAgICAgICAgICAgJEVuY29kZWRDb21tYW5kID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZygkQnl0ZXMpCiAgICAgICAgICAgIAogICAgICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAkRW5jb2RlZENvbW1hbmQKCiAgICAgICAgICAgICRBcmd1bWVudExpc3QgKz0gQCgnLUVuY29kZWRDb21tYW5kJywgJEVuY29kZWRDb21tYW5kKQogICAgICAgIH0KCiAgICAgICAgV3JpdGUtTG9nRGVidWcgJEFyZ3VtZW50TGlzdAoKICAgICAgICBXcml0ZS1Mb2cgIlN0YXJ0aW5nIGV4dGVybmFsIFBvd2VyU2hlbGwgcHJvY2VzcyAuLi4iCgogICAgICAgIGlmICgkQ3JlZGVudGlhbCAtZXEgJG51bGwpIHsKICAgICAgICAgICAgJFByb2Nlc3MgPSBTdGFydC1Qcm9jZXNzIC1GaWxlUGF0aCAncG93ZXJzaGVsbC5leGUnIGAKICAgICAgICAgICAgICAgIC1Bcmd1bWVudExpc3QgQCgkQXJndW1lbnRMaXN0KSBgCiAgICAgICAgICAgICAgICAtUmVkaXJlY3RTdGFuZGFyZE91dHB1dCAkU3RkT3V0IGAKICAgICAgICAgICAgICAgIC1SZWRpcmVjdFN0YW5kYXJkRXJyb3IgJFN0ZEVyciBgCiAgICAgICAgICAgICAgICAtTm9OZXdXaW5kb3cgYAogICAgICAgICAgICAgICAgLVdhaXQgYAogICAgICAgICAgICAgICAgLVBhc3NUaHJ1CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkUHJvY2VzcyA9IFN0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoICdwb3dlcnNoZWxsLmV4ZScgYAogICAgICAgICAgICAgICAgLUFyZ3VtZW50TGlzdCBAKCRBcmd1bWVudExpc3QpIGAKICAgICAgICAgICAgICAgIC1SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ICRTdGRPdXQgYAogICAgICAgICAgICAgICAgLVJlZGlyZWN0U3RhbmRhcmRFcnJvciAkU3RkRXJyIGAKICAgICAgICAgICAgICAgIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIGAKICAgICAgICAgICAgICAgIC1Ob05ld1dpbmRvdyBgCiAgICAgICAgICAgICAgICAtV2FpdCBgCiAgICAgICAgICAgICAgICAtUGFzc1RocnUKICAgICAgICB9CgogICAgICAgIFdyaXRlLUxvZyAiRXh0ZXJuYWwgUG93ZXJTaGVsbCBwcm9jZXNzIGV4aXRlZCB3aXRoIGV4aXQgY29kZSAnJCgkUHJvY2Vzcy5FeGl0Q29kZSknLiIKCiAgICAgICAgI2lmICgkQXJndW1lbnRMaXN0IC1jb250YWlucyAnLUZpbGUnKSB7CiAgICAgICAgIyAgICBSZW1vdmUtSXRlbSAtUGF0aCAkVG1wU2NyaXB0IC1Gb3JjZQogICAgICAgICN9CgogICAgICAgICRFcnJvckFjdGlvblByZWZlcmVuY2VTYXZlZCA9ICRFcnJvckFjdGlvblByZWZlcmVuY2UKICAgICAgICAkRXJyb3JBY3Rpb25QcmVmZXJlbmNlID0gJ1NpbGVudGx5Q29udGludWUnCgogICAgICAgIFdyaXRlLUxvZ0RlYnVnICJTdGRPdXQgZmlsZSBpcyAnJFN0ZE91dCciCiAgICAgICAgV3JpdGUtTG9nRGVidWcgIlN0ZEVyciBmaWxlIGlzICckU3RkRXJyJyIKCiAgICAgICAgaWYgKChHZXQtSXRlbSAkU3RkT3V0KS5MZW5ndGggLWd0IDApIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIFdyaXRlLUxvZ0RlYnVnICJMb2FkaW5nIFN0ZE91dCBmcm9tICckU3RkT3V0JyIKICAgICAgICAgICAgICAgICRUbXBGaWxlID0gU2VsZWN0LUNsaVhtbEJsb2NrICRTdGRPdXQKICAgICAgICAgICAgICAgICRTdGRPdXRPYmplY3QgPSBJbXBvcnQtQ2xpeG1sICRUbXBGaWxlCiAgICAgICAgICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAiPFN0ZE91dD4iCiAgICAgICAgICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAoJFN0ZE91dE9iamVjdCkKICAgICAgICAgICAgICAgIFdyaXRlLUxvZ0RlYnVnICI8L1N0ZE91dD4iCiAgICAgICAgICAgICAgICAkU3RkT3V0T2JqZWN0CiAgICAgICAgICAgICAgICAjUmVtb3ZlLUl0ZW0gLVBhdGggJFRtcEZpbGUgLUZvcmNlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtTG9nRGVidWcgIkFuIGVycm9yIG9jY3VyZWQgd2hpbGUgbG9hZGluZyBTdGRPdXQgZnJvbSAnJFRtcEZpbGUnIgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoKEdldC1JdGVtICRTdGRFcnIpLkxlbmd0aCAtZ3QgMCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgV3JpdGUtTG9nRGVidWcgIkxvYWRpbmcgU3RkRXJyIC4uLiIKICAgICAgICAgICAgICAgICRUbXBGaWxlID0gU2VsZWN0LUNsaVhtbEJsb2NrICRTdGRFcnIKICAgICAgICAgICAgICAgICRTdGRFcnJPYmplY3QgPSBJbXBvcnQtQ2xpeG1sICRUbXBGaWxlCiAgICAgICAgICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAiPFN0ZEVycj4iCiAgICAgICAgICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAoJFN0ZEVyck9iamVjdCkKICAgICAgICAgICAgICAgIFdyaXRlLUxvZ0RlYnVnICI8L1N0ZEVycj4iCiAgICAgICAgICAgICAgICBpZiAoLW5vdCAkSWdub3JlU3RkRXJyKSB7CiAgICAgICAgICAgICAgICAgICAgJFN0ZEVyck9iamVjdAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgI1JlbW92ZS1JdGVtIC1QYXRoICRUbXBGaWxlIC1Gb3JjZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLUxvZ0RlYnVnICJBbiBlcnJvciBvY2N1cmVkIHdoaWxlIGxvYWRpbmcgU3RkRXJyIGZyb20gJyRUbXBGaWxlJyIKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJEVycm9yQWN0aW9uUHJlZmVyZW5jZSA9ICRFcnJvckFjdGlvblByZWZlcmVuY2VTYXZlZAoKICAgICAgICBpZiAoJFByb2Nlc3MuRXhpdENvZGUgLW5lIDApIHsKICAgICAgICAgICAgdGhyb3coIkV4dGVybmFsIFBvd2VyU2hlbGwgcHJvY2VzcyBleGl0ZWQgd2l0aCBjb2RlICckKCRQcm9jZXNzLkV4aXRDb2RlKSciKQogICAgICAgIH0KCiAgICAgICAgI1JlbW92ZS1JdGVtICRTdGRPdXQgLUZvcmNlCiAgICAgICAgI1JlbW92ZS1JdGVtICRTdGRFcnIgLUZvcmNlCiAgICB9Cn0K",
    ""
  ]
}