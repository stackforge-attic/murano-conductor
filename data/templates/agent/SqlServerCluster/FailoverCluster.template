{
  "Commands": [
    {
      "Name": "New-FailoverCluster",
      "Arguments": {
        "UserName": "$domainAdminAccountName",
        "ClusterNodes": "$clusterNodes",
        "DomainName": "$domainName",
        "ClusterName": "$clusterName",
        "UserPassword": "$domainAdminAccountPassword",
        "StaticAddress": "$clusterIP"
      }
    }
  ],
  "RebootOnCompletion": 0,
  "Scripts": [
    "SW1wb3J0LU1vZHVsZSBDb3JlRnVuY3Rpb25zIC1Gb3JjZQ==",
    "CmZ1bmN0aW9uIE5ldy1TcWxTZXJ2ZXJTeXN0ZW1BY2NvdW50IHsKICAgIHBhcmFtICgKICAgICAgICAjIChSRVFVSVJFRCkgRG9tYWluIE5hbWUKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJERvbWFpbk5hbWUsCgogICAgICAgICMgKFJFUVVJUkVEKSBVc2VyIG5hbWUgd2hvIGhhcyBwZXJtaXNzaW9ucyB0byBjcmVhdGUgYW5kIG1vZGlmeSB1c2VyUGFzc3dvcmQKICAgICAgICAjIFVzdWFsbHkgdGhpcyBpcyB0aGUgZG9tYWluIGFkbWluaXN0cmF0b3IgJyRkb21haW5OYW1lXEFkbWluaXN0cmF0b3InIGFjY291bnQKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJFVzZXJOYW1lLAoKICAgICAgICAjIChSRVFVSVJFRCkgUGFzc3dvcmQgZm9yIHRoYXQgdXNlcgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkVXNlclBhc3N3b3JkLAoKICAgICAgICAjIChSRVFVSVJFRCkgVXNlciBuYW1lIGZvciBhIG5ldyBhY2NvdW50IHRoYXQgd2lsbCBiZSB1c2VkIHRvIHJ1biBTUUwgU2VydmVyCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRTUUxTZXJ2aWNlVXNlck5hbWUsCgogICAgICAgICMgKFJFUVVJUkVEKSBQYXNzd29yZCBmb3IgdGhhdCB1c2VyCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRTUUxTZXJ2aWNlVXNlclBhc3N3b3JkLAoKICAgICAgICBbU3RyaW5nXSAkUHJpbWFyeU5vZGUgPSAnICcKICAgICkKCiAgICBpZiAoJFByaW1hcnlOb2RlLlRvTG93ZXIoKSAtbmUgKCRFbnY6Q29tcHV0ZXJOYW1lKS5Ub0xvd2VyKCkpIHsKICAgICAgICBXcml0ZS1Mb2cgIlRIaXMgZnVuY3Rpb24gcnVucyBvbiBBT0FHIHByaW1hcnkgbm9kZSBvbmx5LiIKICAgICAgICBXcml0ZS1Mb2cgIkV4aXRpbmcuIgogICAgICAgIHJldHVybgogICAgfQoKICAgIGlmICgoR2V0LU1vZHVsZSAtTmFtZSAnQWN0aXZlRGlyZWN0b3J5JykgLWVxICRudWxsKSB7CiAgICAgICAgQWRkLVdpbmRvd3NGZWF0dXJlIFJTQVQtQUQtUG93ZXJTaGVsbAogICAgfQoKICAgIGlmICgoR2V0LU1vZHVsZSAtTmFtZSAnQWN0aXZlRGlyZWN0b3J5JykgLWVxICRudWxsKSB7CiAgICAgICAgdGhyb3cgIk1vZHVsZSAnQWN0aXZlRGlyZWN0b3J5JyBpcyBub3QgYXZhaWxhYmxlLiIKICAgIH0KCiAgICAkQ3JlZHMgPSBOZXctQ3JlZGVudGlhbCAtVXNlck5hbWUgIiREb21haW5OYW1lXCRVc2VyTmFtZSIgLVBhc3N3b3JkICIkVXNlclBhc3N3b3JkIgoKICAgICRudWxsID0gTmV3LUFEVXNlciBgCiAgICAgICAgLU5hbWUgJFNRTFNlcnZpY2VVc2VyTmFtZSBgCiAgICAgICAgLUFjY291bnRQYXNzd29yZCAkKENvbnZlcnRUby1TZWN1cmVTdHJpbmcgLVN0cmluZyAkU1FMU2VydmljZVVzZXJQYXNzd29yZCAtQXNQbGFpblRleHQgLUZvcmNlKSBgCiAgICAgICAgLUNyZWRlbnRpYWwgJENyZWRzCn0K",
    "CmZ1bmN0aW9uIFNlbGVjdC1DbGlYbWxCbG9jayB7CiAgICBwYXJhbSAoCiAgICAgICAgW1N0cmluZ10gJFBhdGgsCiAgICAgICAgW1N0cmluZ10gJE91dEZpbGUgPSBbSU8uUGF0aF06OkdldFRlbXBGaWxlTmFtZSgpCiAgICApCgogICAgJFRhZ0ZvdW5kID0gJGZhbHNlCiAgICBHZXQtQ29udGVudCAkUGF0aCB8CiAgICAgICAgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICBpZiAoJF8gLWVxICcjPCBDTElYTUwnKSB7CiAgICAgICAgICAgICAgICAkVGFnRm91bmQgPSAkdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkVGFnRm91bmQpIHsKICAgICAgICAgICAgICAgIEFkZC1Db250ZW50IC1QYXRoICRPdXRGaWxlIC1WYWx1ZSAkXwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgJE91dEZpbGUKfQoKCgpmdW5jdGlvbiBTdGFydC1Qb3dlclNoZWxsUHJvY2VzcyB7CiAgICBwYXJhbSAoCiAgICAgICAgW1N0cmluZ10gJENvbW1hbmQsCiAgICAgICAgJENyZWRlbnRpYWwgPSAkbnVsbCwKICAgICAgICBbU3dpdGNoXSAkSWdub3JlU3RkRXJyLAogICAgICAgIFtTd2l0Y2hdICROb0Jhc2U2NAogICAgKQogICAgCiAgICAkU3RkT3V0ID0gW0lPLlBhdGhdOjpHZXRUZW1wRmlsZU5hbWUoKQogICAgJFN0ZEVyciA9IFtJTy5QYXRoXTo6R2V0VGVtcEZpbGVOYW1lKCkKCiAgICAkQXJndW1lbnRMaXN0ID0gQCgnLU91dHB1dEZvcm1hdCcsICdYTUwnKQoKICAgIGlmICgkTm9CYXNlNjQpIHsKICAgICAgICAkVG1wU2NyaXB0ID0gW0lPLlBhdGhdOjpHZXRUZW1wRmlsZU5hbWUoKQogICAgICAgIFJlbmFtZS1JdGVtIC1QYXRoICIkVG1wU2NyaXB0IiAtTmV3TmFtZSAiJFRtcFNjcmlwdC5wczEiIC1Gb3JjZQogICAgICAgICRUbXBTY3JpcHQgPSAiJFRtcFNjcmlwdC5wczEiCgogICAgICAgIFdyaXRlLUxvZ0RlYnVnICRUbXBTY3JpcHQKCiAgICAgICAgJENvbW1hbmQgfCBPdXQtRmlsZSAkVG1wU2NyaXB0CgogICAgICAgICRBcmd1bWVudExpc3QgKz0gQCgnLUZpbGUnLCAiJFRtcFNjcmlwdCIpCiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkQnl0ZXMgPSBbVGV4dC5FbmNvZGluZ106OlVuaWNvZGUuR2V0Qnl0ZXMoJENvbW1hbmQpCiAgICAgICAgJEVuY29kZWRDb21tYW5kID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZygkQnl0ZXMpCiAgICAgICAgCiAgICAgICAgV3JpdGUtTG9nRGVidWcgJEVuY29kZWRDb21tYW5kCgogICAgICAgICRBcmd1bWVudExpc3QgKz0gQCgnLUVuY29kZWRDb21tYW5kJywgJEVuY29kZWRDb21tYW5kKQogICAgfQoKICAgIFdyaXRlLUxvZ0RlYnVnICRBcmd1bWVudExpc3QKCiAgICBXcml0ZS1Mb2cgIlN0YXJ0aW5nIGV4dGVybmFsIFBvd2VyU2hlbGwgcHJvY2VzcyAuLi4iCgogICAgaWYgKCRDcmVkZW50aWFsIC1lcSAkbnVsbCkgewogICAgICAgICRQcm9jZXNzID0gU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggJ3Bvd2Vyc2hlbGwuZXhlJyBgCiAgICAgICAgICAgIC1Bcmd1bWVudExpc3QgQCgkQXJndW1lbnRMaXN0KSBgCiAgICAgICAgICAgIC1SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ICRTdGRPdXQgYAogICAgICAgICAgICAtUmVkaXJlY3RTdGFuZGFyZEVycm9yICRTdGRFcnIgYAogICAgICAgICAgICAtTm9OZXdXaW5kb3cgYAogICAgICAgICAgICAtV2FpdCBgCiAgICAgICAgICAgIC1QYXNzVGhydQogICAgfQogICAgZWxzZSB7CiAgICAgICAgJFByb2Nlc3MgPSBTdGFydC1Qcm9jZXNzIC1GaWxlUGF0aCAncG93ZXJzaGVsbC5leGUnIGAKICAgICAgICAgICAgLUFyZ3VtZW50TGlzdCBAKCRBcmd1bWVudExpc3QpIGAKICAgICAgICAgICAgLVJlZGlyZWN0U3RhbmRhcmRPdXRwdXQgJFN0ZE91dCBgCiAgICAgICAgICAgIC1SZWRpcmVjdFN0YW5kYXJkRXJyb3IgJFN0ZEVyciBgCiAgICAgICAgICAgIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIGAKICAgICAgICAgICAgLU5vTmV3V2luZG93IGAKICAgICAgICAgICAgLVdhaXQgYAogICAgICAgICAgICAtUGFzc1RocnUKICAgIH0KCiAgICBXcml0ZS1Mb2cgIkV4dGVybmFsIFBvd2VyU2hlbGwgcHJvY2VzcyBleGl0ZWQgd2l0aCBleGl0IGNvZGUgJyQoJFByb2Nlc3MuRXhpdENvZGUpJy4iCgogICAgI2lmICgkQXJndW1lbnRMaXN0IC1jb250YWlucyAnLUZpbGUnKSB7CiAgICAjICAgIFJlbW92ZS1JdGVtIC1QYXRoICRUbXBTY3JpcHQgLUZvcmNlCiAgICAjfQoKICAgICRFcnJvckFjdGlvblByZWZlcmVuY2VTYXZlZCA9ICRFcnJvckFjdGlvblByZWZlcmVuY2UKICAgICRFcnJvckFjdGlvblByZWZlcmVuY2UgPSAnU2lsZW50bHlDb250aW51ZScKCiAgICBXcml0ZS1Mb2dEZWJ1ZyAiU3RkT3V0IGZpbGUgaXMgJyRTdGRPdXQnIgogICAgV3JpdGUtTG9nRGVidWcgIlN0ZEVyciBmaWxlIGlzICckU3RkRXJyJyIKCiAgICBpZiAoKEdldC1JdGVtICRTdGRPdXQpLkxlbmd0aCAtZ3QgMCkgewogICAgICAgIFdyaXRlLUxvZ0RlYnVnICJMb2FkaW5nIFN0ZE91dCBmcm9tICckU3RkT3V0JyIKICAgICAgICAkVG1wRmlsZSA9IFNlbGVjdC1DbGlYbWxCbG9jayAkU3RkT3V0CiAgICAgICAgJFN0ZE91dE9iamVjdCA9IEltcG9ydC1DbGl4bWwgJFRtcEZpbGUKICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAiPFN0ZE91dD4iCiAgICAgICAgV3JpdGUtTG9nRGVidWcgKCRTdGRPdXRPYmplY3QpCiAgICAgICAgV3JpdGUtTG9nRGVidWcgIjwvU3RkT3V0PiIKICAgICAgICAkU3RkT3V0T2JqZWN0CiAgICAgICAgI1JlbW92ZS1JdGVtIC1QYXRoICRUbXBGaWxlIC1Gb3JjZQogICAgfQoKICAgIGlmICgoR2V0LUl0ZW0gJFN0ZEVycikuTGVuZ3RoIC1ndCAwKSB7CiAgICAgICAgV3JpdGUtTG9nRGVidWcgIkxvYWRpbmcgU3RkRXJyIC4uLiIKICAgICAgICAkVG1wRmlsZSA9IFNlbGVjdC1DbGlYbWxCbG9jayAkU3RkRXJyCiAgICAgICAgJFN0ZEVyck9iamVjdCA9IEltcG9ydC1DbGl4bWwgJFRtcEZpbGUKICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAiPFN0ZEVycj4iCiAgICAgICAgV3JpdGUtTG9nRGVidWcgKCRTdGRFcnJPYmplY3QpCiAgICAgICAgV3JpdGUtTG9nRGVidWcgIjwvU3RkRXJyPiIKICAgICAgICBpZiAoLW5vdCAkSWdub3JlU3RkRXJyKSB7CiAgICAgICAgICAgICRTdGRFcnJPYmplY3QKICAgICAgICB9CiAgICAgICAgI1JlbW92ZS1JdGVtIC1QYXRoICRUbXBGaWxlIC1Gb3JjZQogICAgfQoKICAgICRFcnJvckFjdGlvblByZWZlcmVuY2UgPSAkRXJyb3JBY3Rpb25QcmVmZXJlbmNlU2F2ZWQKCiAgICBpZiAoJFByb2Nlc3MuRXhpdENvZGUgLW5lIDApIHsKICAgICAgICB0aHJvdygiRXh0ZXJuYWwgUG93ZXJTaGVsbCBwcm9jZXNzIGV4aXRlZCB3aXRoIGNvZGUgJyQoJFByb2Nlc3MuRXhpdENvZGUpJyIpCiAgICB9CgogICAgI1JlbW92ZS1JdGVtICRTdGRPdXQgLUZvcmNlCiAgICAjUmVtb3ZlLUl0ZW0gJFN0ZEVyciAtRm9yY2UKfQo=",
    "PCMNCi5ERVNDUklQVElPTg0KDQojIyBGYWlsb3ZlciBDbHVzdGVyIElucHV0IERhdGEgKGZyb20gdGhlIFVJKQ0KDQoqIERvbWFpbiBNZW1iZXJzaGlwDQogICAgLSBbU3RyaW5nXSAvIFtTZWxlY3QgYm94XSAkRG9tYWluTmFtZSAtIERvbWFpbiBuYW1lDQoqIERvbWFpbiBVc2VyIENyZWRlbnRpYWxzDQogICAgLSBbU3RyaW5nXSAkVXNlck5hbWUgLSBVc2VybmFtZQ0KICAgIC0gW1Bhc3N3b3JkIHN0cmluZ10gJFVzZXJQYXNzd29yZCAtIFVzZXIgcGFzc3dvcmQNCiogU2hhcmVkIEZvbGRlciBJbmZvcm1hdGlvbg0KICAgIC0gW1N0cmluZ10gJFNoYXJlU2VydmVyIC0gU2VydmVyIHdoaWNoIHdpbGwgaG9zdCB0aGUgZm9sZGVyDQogICAgLSBbU3RyaW5nXSAkU2hhcmVOYW1lIC0gU2hhcmUgbmFtZQ0KICAgIC0gW1N0cmluZ10gJFNoYXJlUGF0aCAtIFNoYXJlZCBmb2xkZXIgaW50ZXJuYWwgcGF0aA0KKiBGYWlsb3ZlciBDbHVzdGVyIE1lbWJlcnMNCiAgICAtIFtTdHJpbmddICRDbHVzdGVyTmFtZSAtIENsdXN0ZXIgbmFtZQ0KICAgIC0gW1N0cmluZ10gJENsdXN0ZXJJUCAtIFN0YXRpYyBJUCBhZGRyZXNzIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUgY2x1c3Rlcg0KICAgIC0gW1N0cmluZ1tdXSAkQ2x1c3Rlck5vZGVzIC0gTGlzdCBvZiBub2RlIG5hbWVzDQoNCg0KDQojIyBGYWlsb3ZlciBDbHVzdGVyIGNyZWF0aW9uIHdvcmtmbG93DQoNCiogQ3JlYXRlIEFEIGRvbWFpbg0KKiBKb2luIGFsbCB0aGUgVk1zIHRvIHRoYXQgZG9tYWluDQoqIFByZXBhcmUgbm9kZXMNCiAgICAtIEluc3RhbGwgRmFpbG92ZXIgQ2x1c3RlciBwcmVyZXF1aXNpdGVzIG9uIGFsbCBGQyBub2Rlcw0KKiBDcmVhdGUgZmFpbG92ZXIgY2x1c3Rlcg0KICAgIC0gQ3JlYXRlIG5ldyBjbHVzdGVyDQogICAgLSBBZGQgbWVtYmVycw0KKiBDb25mdWd1cmUgRkMgcXVvcnVtDQogICAgLSBDcmVhdGUgbmV3IGZvbGRlciB0aGF0IHdpbGwgYmUgc2hhcmVkDQogICAgLSBTaGFyZSB0aGF0IGZvbGRlciB3aXRoIGFwcHJvcHJpYXRlIHBlcm1pc3Npb25zDQogICAgLSBDb25maWd1cmUgcXVvcnVtIG1vZGUNCg0KDQoNCiMjIEhlbHBmdWwgU21iU2hhcmUqIEZ1bmN0aW9ucw0KDQoqIE5ldy1TbWJTaGFyZQ0KKiBHcmFudC1TbWJTaGFyZUFjY2Vzcw0KDQojPg0KDQoNCg0KZnVuY3Rpb24gSW5zdGFsbC1GYWlsb3ZlckNsdXN0ZXJQcmVyZXF1aXNpdGVzIHsNCiAgICBJbXBvcnQtTW9kdWxlIEZhaWxvdmVyQ2x1c3RlcnMNCg0KICAgIEFkZC1XaW5kb3dzRmVhdHVyZSBGYWlsb3Zlci1DbHVzdGVyaW5nLCBSU0FULUNsdXN0ZXJpbmctUG93ZXJTaGVsbA0KfQ0KDQoNCg0KZnVuY3Rpb24gTmV3LUZhaWxvdmVyQ2x1c3RlclNoYXJlZEZvbGRlciB7DQoJcGFyYW0gKA0KICAgICAgICBbU3RyaW5nXSAkQ2x1c3Rlck5hbWUsDQogICAgICAgIFtTdHJpbmddICREb21haW5OYW1lLA0KICAgICAgICBbU3RyaW5nXSAkU2hhcmVTZXJ2ZXIsDQoJCVtTdHJpbmddICRTaGFyZVBhdGgsDQoJCVtTdHJpbmddICRTaGFyZU5hbWUsDQogICAgICAgIFtTdHJpbmddICRVc2VyTmFtZSwNCiAgICAgICAgW1N0cmluZ10gJFVzZXJQYXNzd29yZCwNCiAgICAgICAgJENyZWRlbnRpYWwgPSAkbnVsbA0KCSkNCiAgICANCiAgICBpZiAoJENyZWRlbnRpYWwgLWVxICRudWxsKSB7DQogICAgICAgICRDcmVkZW50aWFsID0gTmV3LUNyZWRlbnRpYWwgLVVzZXJOYW1lICIkRG9tYWluTmFtZVwkVXNlck5hbWUiIC1QYXNzd29yZCAiJFVzZXJQYXNzd29yZCINCiAgICB9DQoNCiAgICBpZiAoKFRlc3QtQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lICRTaGFyZVNlcnZlciAtQ291bnQgMSAtUXVpZXQpIC1lcSAkZmFsc2UpIHsNCiAgICAgICAgdGhyb3coIlNlcnZlciAnJFNoYXJlU2VydmVyJyBpcyB1bnJlYWNoYWJsZSB2aWEgSUNNUC4iKQ0KICAgIH0NCg0KICAgICRTZXNzaW9uID0gTmV3LVBTU2Vzc2lvbiAtQ29tcHV0ZXJOYW1lICRTaGFyZVNlcnZlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbA0KDQogICAgSW52b2tlLUNvbW1hbmQgLVNlc3Npb24gJFNlc3Npb24gLVNjcmlwdEJsb2NrIHsNCiAgICAgICAgICAgIHBhcmFtICgNCiAgICAgICAgICAgICAgICBbU3RyaW5nXSAkU2hhcmVQYXRoLA0KICAgICAgICAgICAgICAgIFtTdHJpbmddICRTaGFyZU5hbWUsDQogICAgICAgICAgICAgICAgW1N0cmluZ10gJENsdXN0ZXJBY2NvdW50DQogICAgICAgICAgICApDQoNCiAgICAgICAgICAgIFJlbW92ZS1TbWJTaGFyZSAtTmFtZSAkU2hhcmVOYW1lIC1Gb3JjZSAtRXJyb3JBY3Rpb24gJ1NpbGVudGx5Q29udGludWUnDQogICAgICAgICAgICBSZW1vdmUtSXRlbSAtUGF0aCAkU2hhcmVQYXRoIC1Gb3JjZSAtRXJyb3JBY3Rpb24gJ1NpbGVudGx5Q29udGludWUnDQoNCiAgICAgICAgICAgIE5ldy1JdGVtIC1QYXRoICRTaGFyZVBhdGggLUl0ZW1UeXBlIENvbnRhaW5lciAtRm9yY2UNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgTmV3LVNtYlNoYXJlIC1QYXRoICRTaGFyZVBhdGggYA0KICAgICAgICAgICAgICAgIC1OYW1lICRTaGFyZU5hbWUgYA0KICAgICAgICAgICAgICAgIC1GdWxsQWNjZXNzICIkQ2x1c3RlckFjY291bnQiIGANCiAgICAgICAgICAgICAgICAtRGVzY3JpcHRpb24gIlNoYXJlZCBmb2xkZXIgZm9yIEZhaWxvdmVyIENsdXN0ZXIuIg0KDQogICAgICAgIH0gLUFyZ3VtZW50TGlzdCAkU2hhcmVQYXRoLCAkU2hhcmVOYW1lLCAiJERvbWFpbk5hbWVcJENsdXN0ZXJOYW1lYCQiDQoNCiAgICBTZXQtQ2x1c3RlclF1b3J1bSAtTm9kZUFuZEZpbGVTaGFyZU1ham9yaXR5ICJcXCRTaGFyZVNlcnZlclwkU2hhcmVOYW1lIg0KfQ0KDQoNCg0KZnVuY3Rpb24gTmV3LUZhaWxvdmVyQ2x1c3RlciB7DQoJcGFyYW0gKA0KCQlbU3RyaW5nXSAkQ2x1c3Rlck5hbWUsDQoJCVtTdHJpbmddICRTdGF0aWNBZGRyZXNzLA0KCQlbU3RyaW5nW11dICRDbHVzdGVyTm9kZXMsDQogICAgICAgIFtTdHJpbmddICREb21haW5OYW1lLA0KICAgICAgICBbU3RyaW5nXSAkVXNlck5hbWUsDQogICAgICAgIFtTdHJpbmddICRVc2VyUGFzc3dvcmQsDQogICAgICAgICRDcmVkZW50aWFsDQoJKQ0KDQogICAgV3JpdGUtTG9nICJDbHVzdGVyTm9kZXM6ICQoJENsdXN0ZXJOb2RlcyAtam9pbiAnLCAnKSINCg0KICAgIGlmICgkQ3JlZGVudGlhbCAtZXEgJG51bGwpIHsNCiAgICAgICAgJENyZWRlbnRpYWwgPSBOZXctQ3JlZGVudGlhbCAtVXNlck5hbWUgIiREb21haW5OYW1lXCRVc2VyTmFtZSIgLVBhc3N3b3JkICIkVXNlclBhc3N3b3JkIg0KICAgIH0NCg0KICAgIEltcG9ydC1Nb2R1bGUgRmFpbG92ZXJDbHVzdGVycw0KDQoJaWYgKChHZXQtQ2x1c3RlciAkQ2x1c3Rlck5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpIC1lcSAkbnVsbCkgew0KICAgICAgICBXcml0ZS1Mb2cgIkNyZWF0aW5nIG5ldyBjbHVzdGVyICckQ2x1c3Rlck5hbWUnIC4uLiINCiAgICAgICAgU3RhcnQtUG93ZXJTaGVsbFByb2Nlc3MgLUNvbW1hbmQgQCINCkltcG9ydC1Nb2R1bGUgRmFpbG92ZXJDbHVzdGVycw0KTmV3LUNsdXN0ZXIgLU5hbWUgJyRDbHVzdGVyTmFtZScgLVN0YXRpY0FkZHJlc3MgJyRTdGF0aWNBZGRyZXNzJw0KIkAgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLU5vQmFzZTY0DQogICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzIDE1DQogICAgfQ0KICAgIGVsc2Ugew0KICAgICAgICBXcml0ZS1Mb2cgIkNsdXN0ZXIgJyRDbHVzdGVyTmFtZScgYWxyZWFkeSBleGlzdHMuIg0KICAgIH0NCg0KICAgIGZvcmVhY2ggKCROb2RlIGluICRDbHVzdGVyTm9kZXMpIHsNCiAgICAgICAgV3JpdGUtTG9nICJBZGRpbmcgbm9kZSAnJE5vZGUnIHRvIHRoZSBjbHVzdGVyICckQ2x1c3Rlck5hbWUnIC4uLiINCiAgICAgICAgaWYgKChHZXQtQ2x1c3Rlck5vZGUgJE5vZGUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpIC1lcSAkbnVsbCkgew0KICAgICAgICAgICAgV3JpdGUtTG9nICJBZGRpbmcgbm9kZSAuLi4iDQogICAgICAgICAgICBTdGFydC1Qb3dlclNoZWxsUHJvY2VzcyAtQ29tbWFuZCBAIg0KSW1wb3J0LU1vZHVsZSBGYWlsb3ZlckNsdXN0ZXJzDQpBZGQtQ2x1c3Rlck5vZGUgLUNsdXN0ZXIgJyRDbHVzdGVyTmFtZScgLU5hbWUgJyROb2RlJw0KIkAgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLU5vQmFzZTY0DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICBXcml0ZS1Mb2cgIk5vZGUgJyROb2RlJyBhbHJlYWR5IGEgcGFydCBvZiB0aGUgY2x1c3RlciAnJENsdXN0ZXJOYW1lJy4iDQogICAgICAgIH0NCiAgICB9DQp9DQoNCg0KDQo8Iw0KDQojIEV4YW1wbGUNCg0KJERvbWFpbk5hbWUgPSAnZmMtYWNtZS5sb2NhbCcNCiREb21haW5Vc2VyID0gJ0FkbWluaXN0cmF0b3InDQokRG9tYWluUGFzc3dvcmQgPSAnUEBzc3cwcmQnDQoNCiRDbHVzdGVyTmFtZSA9ICdmYy10ZXN0Jw0KJENsdXN0ZXJJUCA9ICcxMC4yMDAuMC42MCcNCiRDbHVzdGVyTm9kZXMgPSBAKCdmYy1ub2RlLTAxJywnZmMtbm9kZS0wMicsJ2ZjLW5vZGUtMDMnKQ0KDQokU2hhcmVTZXJ2ZXIgPSAnZmMtZGMtMDEnDQokU2hhcmVOYW1lID0gJ0ZDU2hhcmUnDQoNCiRTaGFyZVBhdGggPSAiQzpcJFNoYXJlTmFtZSINCg0KDQoNCkltcG9ydC1Nb2R1bGUgQ29yZUZ1bmN0aW9ucyAtRm9yY2UNCg0KJENyZWRzID0gTmV3LUNyZWRlbnRpYWwgYA0KICAgIC1Vc2VyTmFtZSAiJERvbWFpbk5hbWVcJERvbWFpblVzZXIiIGANCiAgICAtUGFzc3dvcmQgIiREb21haW5QYXNzd29yZCINCg0KTmV3LUZhaWxvdmVyQ2x1c3RlciBgDQogICAgLUNsdXN0ZXJOYW1lICRDbHVzdGVyTmFtZSBgDQogICAgLVN0YXRpY0FkZHJlc3MgJENsdXN0ZXJJUCBgDQogICAgLUNsdXN0ZXJOb2RlcyAkQ2x1c3Rlck5vZGVzIGANCiAgICAtQ3JlZGVudGlhbCAkQ3JlZHMNCg0KTmV3LUZhaWxvdmVyQ2x1c3RlclNoYXJlZEZvbGRlciBgDQogICAgLUNsdXN0ZXJOYW1lICRDbHVzdGVyTmFtZSBgDQogICAgLURvbWFpbk5hbWUgJERvbWFpbk5hbWUgYA0KICAgIC1TaGFyZVNlcnZlciAkU2hhcmVTZXJ2ZXIgYA0KICAgIC1TaGFyZVBhdGggIiRTaGFyZVBhdGgiIGANCiAgICAtU2hhcmVOYW1lICIkU2hhcmVOYW1lIiBgDQogICAgLUNyZWRlbnRpYWwgJENyZWRzDQoNCiM+DQo="
  ]
}