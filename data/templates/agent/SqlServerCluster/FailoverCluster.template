{
  "Commands": [
    {
      "Name": "New-FailoverCluster",
      "Arguments": {
        "ClusterName": "$clusterName",
        "ClusterNodes": "$clusterNodes",
        "UserPassword": "$domainAdminAccountPassword",
        "UserName": "$domainAdminAccountName",
        "StaticAddress": "$clusterIP"
      }
    },
    {
      "Name": "New-SqlServerSystemAccount",
      "Arguments": {
        "UserName": "$domainAdminAccountName",
        "SQLServiceUserPassword": "$sqlServiceAccountPassword",
        "UserPassword": "$domainAdminAccountPassword",
        "DomainName": "$domainName",
        "SQLServiceUserName": "$sqlServiceAccountName"
      }
    }
  ],
  "RebootOnCompletion": 0,
  "Scripts": [
    "SW1wb3J0LU1vZHVsZSBDb3JlRnVuY3Rpb25zIC1Gb3JjZQ==",
    "CmZ1bmN0aW9uIE5ldy1TcWxTZXJ2ZXJTeXN0ZW1BY2NvdW50IHsKICAgIHBhcmFtICgKICAgICAgICAjIChSRVFVSVJFRCkgRG9tYWluIE5hbWUKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJERvbWFpbk5hbWUsCgogICAgICAgICMgKFJFUVVJUkVEKSBVc2VyIG5hbWUgd2hvIGhhcyBwZXJtaXNzaW9ucyB0byBjcmVhdGUgYW5kIG1vZGlmeSB1c2VyUGFzc3dvcmQKICAgICAgICAjIFVzdWFsbHkgdGhpcyBpcyB0aGUgZG9tYWluIGFkbWluaXN0cmF0b3IgJyRkb21haW5OYW1lXEFkbWluaXN0cmF0b3InIGFjY291bnQKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJFVzZXJOYW1lLAoKICAgICAgICAjIChSRVFVSVJFRCkgUGFzc3dvcmQgZm9yIHRoYXQgdXNlcgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkVXNlclBhc3N3b3JkLAoKICAgICAgICAjIChSRVFVSVJFRCkgVXNlciBuYW1lIGZvciBhIG5ldyBhY2NvdW50IHRoYXQgd2lsbCBiZSB1c2VkIHRvIHJ1biBTUUwgU2VydmVyCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRTUUxTZXJ2aWNlVXNlck5hbWUsCgogICAgICAgICMgKFJFUVVJUkVEKSBQYXNzd29yZCBmb3IgdGhhdCB1c2VyCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRTUUxTZXJ2aWNlVXNlclBhc3N3b3JkCiAgICApCn0K",
    "CmZ1bmN0aW9uIFNlbGVjdC1DbGlYbWxCbG9jayB7CiAgICBwYXJhbSAoCiAgICAgICAgW1N0cmluZ10gJFBhdGgsCiAgICAgICAgW1N0cmluZ10gJE91dEZpbGUgPSBbSU8uUGF0aF06OkdldFRlbXBGaWxlTmFtZSgpCiAgICApCgogICAgJFRhZ0ZvdW5kID0gJGZhbHNlCiAgICBHZXQtQ29udGVudCAkUGF0aCB8CiAgICAgICAgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICBpZiAoJF8gLWVxICcjPCBDTElYTUwnKSB7CiAgICAgICAgICAgICAgICAkVGFnRm91bmQgPSAkdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkVGFnRm91bmQpIHsKICAgICAgICAgICAgICAgIEFkZC1Db250ZW50IC1QYXRoICRPdXRGaWxlIC1WYWx1ZSAkXwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgJE91dEZpbGUKfQoKCgpmdW5jdGlvbiBTdGFydC1Qb3dlclNoZWxsUHJvY2VzcyB7CiAgICBwYXJhbSAoCiAgICAgICAgW1N0cmluZ10gJENvbW1hbmQsCiAgICAgICAgJENyZWRlbnRpYWwgPSAkbnVsbCwKICAgICAgICBbU3dpdGNoXSAkSWdub3JlU3RkRXJyCiAgICApCiAgICAKICAgICRCeXRlcyA9IFtUZXh0LkVuY29kaW5nXTo6VW5pY29kZS5HZXRCeXRlcygkQ29tbWFuZCkKICAgICRFbmNvZGVkQ29tbWFuZCA9IFtDb252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoJEJ5dGVzKQoKICAgIFdyaXRlLUhvc3QgJEVuY29kZWRDb21tYW5kCgogICAgJFN0ZE91dCA9IFtJTy5QYXRoXTo6R2V0VGVtcEZpbGVOYW1lKCkKICAgICRTdGRFcnIgPSBbSU8uUGF0aF06OkdldFRlbXBGaWxlTmFtZSgpCiAgICAkQXJndW1lbnRMaXN0ID0gQCgnLU91dHB1dEZvcm1hdCcsICdYTUwnLCAnLUVuY29kZWRDb21tYW5kJywgJEVuY29kZWRDb21tYW5kKQoKICAgIGlmICgkQ3JlZGVudGlhbCAtZXEgJG51bGwpIHsKICAgICAgICAkUHJvY2VzcyA9IFN0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoICdwb3dlcnNoZWxsLmV4ZScgYAogICAgICAgICAgICAtQXJndW1lbnRMaXN0IEAoJEFyZ3VtZW50TGlzdCkgYAogICAgICAgICAgICAtUmVkaXJlY3RTdGFuZGFyZE91dHB1dCAkU3RkT3V0IGAKICAgICAgICAgICAgLVJlZGlyZWN0U3RhbmRhcmRFcnJvciAkU3RkRXJyIGAKICAgICAgICAgICAgLU5vTmV3V2luZG93IGAKICAgICAgICAgICAgLVdhaXQgYAogICAgICAgICAgICAtUGFzc1RocnUKICAgIH0KICAgIGVsc2UgewogICAgICAgICRQcm9jZXNzID0gU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggJ3Bvd2Vyc2hlbGwuZXhlJyBgCiAgICAgICAgICAgIC1Bcmd1bWVudExpc3QgQCgkQXJndW1lbnRMaXN0KSBgCiAgICAgICAgICAgIC1SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ICRTdGRPdXQgYAogICAgICAgICAgICAtUmVkaXJlY3RTdGFuZGFyZEVycm9yICRTdGRFcnIgYAogICAgICAgICAgICAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCBgCiAgICAgICAgICAgIC1Ob05ld1dpbmRvdyBgCiAgICAgICAgICAgIC1XYWl0IGAKICAgICAgICAgICAgLVBhc3NUaHJ1CiAgICB9CgogICAgJEVycm9yQWN0aW9uUHJlZmVyZW5jZVNhdmVkID0gJEVycm9yQWN0aW9uUHJlZmVyZW5jZQogICAgJEVycm9yQWN0aW9uUHJlZmVyZW5jZSA9ICdTaWxlbnRseUNvbnRpbnVlJwoKICAgIFdyaXRlLUxvZyAiU3RkT3V0IGZpbGUgaXMgJyRTdGRPdXQnIgogICAgV3JpdGUtTG9nICJTdGRFcnIgZmlsZSBpcyAnJFN0ZEVyciciCgogICAgU2VsZWN0LUNsaVhtbEJsb2NrICRTdGRPdXQgCgogICAgaWYgKChHZXQtSXRlbSAkU3RkT3V0KS5MZW5ndGggLWd0IDApIHsKICAgICAgICBXcml0ZS1Mb2cgIkxvYWRpbmcgU3RkT3V0IGZyb20gJyRTdGRPdXQnIgogICAgICAgICRUbXBGaWxlID0gU2VsZWN0LUNsaVhtbEJsb2NrICRTdGRPdXQKICAgICAgICBJbXBvcnQtQ2xpeG1sICRUbXBGaWxlCiAgICAgICAgUmVtb3ZlLUl0ZW0gLVBhdGggJFRtcEZpbGUgLUZvcmNlCiAgICB9CgogICAgU2VsZWN0LUNsaVhtbEJsb2NrICRTdGRFcnIKCiAgICBpZiAoLW5vdCAkSWdub3JlU3RkRXJyKSB7CiAgICAgICAgaWYgKChHZXQtSXRlbSAkU3RkRXJyKS5MZW5ndGggLWd0IDApIHsKICAgICAgICAgICAgV3JpdGUtTG9nICJMb2FkaW5nIFN0ZEVyciBmcm9tICckU3RkRXJyJyIKICAgICAgICAgICAgJFRtcEZpbGUgPSBTZWxlY3QtQ2xpWG1sQmxvY2sgJFN0ZEVycgogICAgICAgICAgICBJbXBvcnQtQ2xpeG1sICRUbXBGaWxlCiAgICAgICAgICAgIFJlbW92ZS1JdGVtIC1QYXRoICRUbXBGaWxlIC1Gb3JjZQogICAgICAgIH0KICAgIH0KCiAgICAkRXJyb3JBY3Rpb25QcmVmZXJlbmNlID0gJEVycm9yQWN0aW9uUHJlZmVyZW5jZVNhdmVkCgogICAgaWYgKCRQcm9jZXNzLkV4aXRDb2RlIC1uZSAwKSB7CiAgICAgICAgdGhyb3coIkV4dGVybmFsIFBvd2VyU2hlbGwgcHJvY2VzcyBleGl0ZWQgd2l0aCBjb2RlICckKCRQcm9jZXNzLkV4aXRDb2RlKSciKQogICAgfQoKICAgICNSZW1vdmUtSXRlbSAkU3RkT3V0IC1Gb3JjZQogICAgI1JlbW92ZS1JdGVtICRTdGRFcnIgLUZvcmNlCn0K",
    "PCMNCi5ERVNDUklQVElPTg0KDQojIyBGYWlsb3ZlciBDbHVzdGVyIElucHV0IERhdGEgKGZyb20gdGhlIFVJKQ0KDQoqIERvbWFpbiBNZW1iZXJzaGlwDQogICAgLSBbU3RyaW5nXSAvIFtTZWxlY3QgYm94XSAkRG9tYWluTmFtZSAtIERvbWFpbiBuYW1lDQoqIERvbWFpbiBVc2VyIENyZWRlbnRpYWxzDQogICAgLSBbU3RyaW5nXSAkVXNlck5hbWUgLSBVc2VybmFtZQ0KICAgIC0gW1Bhc3N3b3JkIHN0cmluZ10gJFVzZXJQYXNzd29yZCAtIFVzZXIgcGFzc3dvcmQNCiogU2hhcmVkIEZvbGRlciBJbmZvcm1hdGlvbg0KICAgIC0gW1N0cmluZ10gJFNoYXJlU2VydmVyIC0gU2VydmVyIHdoaWNoIHdpbGwgaG9zdCB0aGUgZm9sZGVyDQogICAgLSBbU3RyaW5nXSAkU2hhcmVOYW1lIC0gU2hhcmUgbmFtZQ0KICAgIC0gW1N0cmluZ10gJFNoYXJlUGF0aCAtIFNoYXJlZCBmb2xkZXIgaW50ZXJuYWwgcGF0aA0KKiBGYWlsb3ZlciBDbHVzdGVyIE1lbWJlcnMNCiAgICAtIFtTdHJpbmddICRDbHVzdGVyTmFtZSAtIENsdXN0ZXIgbmFtZQ0KICAgIC0gW1N0cmluZ10gJENsdXN0ZXJJUCAtIFN0YXRpYyBJUCBhZGRyZXNzIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUgY2x1c3Rlcg0KICAgIC0gW1N0cmluZ1tdXSAkQ2x1c3Rlck5vZGVzIC0gTGlzdCBvZiBub2RlIG5hbWVzDQoNCg0KDQojIyBGYWlsb3ZlciBDbHVzdGVyIGNyZWF0aW9uIHdvcmtmbG93DQoNCiogQ3JlYXRlIEFEIGRvbWFpbg0KKiBKb2luIGFsbCB0aGUgVk1zIHRvIHRoYXQgZG9tYWluDQoqIFByZXBhcmUgbm9kZXMNCiAgICAtIEluc3RhbGwgRmFpbG92ZXIgQ2x1c3RlciBwcmVyZXF1aXNpdGVzIG9uIGFsbCBGQyBub2Rlcw0KKiBDcmVhdGUgZmFpbG92ZXIgY2x1c3Rlcg0KICAgIC0gQ3JlYXRlIG5ldyBjbHVzdGVyDQogICAgLSBBZGQgbWVtYmVycw0KKiBDb25mdWd1cmUgRkMgcXVvcnVtDQogICAgLSBDcmVhdGUgbmV3IGZvbGRlciB0aGF0IHdpbGwgYmUgc2hhcmVkDQogICAgLSBTaGFyZSB0aGF0IGZvbGRlciB3aXRoIGFwcHJvcHJpYXRlIHBlcm1pc3Npb25zDQogICAgLSBDb25maWd1cmUgcXVvcnVtIG1vZGUNCg0KDQoNCiMjIEhlbHBmdWwgU21iU2hhcmUqIEZ1bmN0aW9ucw0KDQoqIE5ldy1TbWJTaGFyZQ0KKiBHcmFudC1TbWJTaGFyZUFjY2Vzcw0KDQojPg0KDQoNCg0KZnVuY3Rpb24gSW5zdGFsbC1GYWlsb3ZlckNsdXN0ZXJQcmVyZXF1aXNpdGVzIHsNCiAgICBJbXBvcnQtTW9kdWxlIEZhaWxvdmVyQ2x1c3RlcnMNCg0KICAgIEFkZC1XaW5kb3dzRmVhdHVyZSBGYWlsb3Zlci1DbHVzdGVyaW5nLCBSU0FULUNsdXN0ZXJpbmctUG93ZXJTaGVsbA0KfQ0KDQoNCg0KZnVuY3Rpb24gTmV3LUZhaWxvdmVyQ2x1c3RlclNoYXJlZEZvbGRlciB7DQoJcGFyYW0gKA0KICAgICAgICBbU3RyaW5nXSAkQ2x1c3Rlck5hbWUsDQogICAgICAgIFtTdHJpbmddICREb21haW5OYW1lLA0KICAgICAgICBbU3RyaW5nXSAkU2hhcmVTZXJ2ZXIsDQoJCVtTdHJpbmddICRTaGFyZVBhdGgsDQoJCVtTdHJpbmddICRTaGFyZU5hbWUsDQogICAgICAgIFtTdHJpbmddICRVc2VyTmFtZSwNCiAgICAgICAgW1N0cmluZ10gJFVzZXJQYXNzd29yZCwNCiAgICAgICAgJENyZWRlbnRpYWwgPSAkbnVsbA0KCSkNCiAgICANCiAgICBpZiAoJENyZWRlbnRpYWwgLWVxICRudWxsKSB7DQogICAgICAgICRDcmVkZW50aWFsID0gTmV3LUNyZWRlbnRpYWwgLVVzZXJOYW1lICIkRG9tYWluTmFtZVwkVXNlck5hbWUiIC1QYXNzd29yZCAiJFVzZXJQYXNzd29yZCINCiAgICB9DQoNCiAgICBpZiAoKFRlc3QtQ29ubmVjdGlvbiAtQ29tcHV0ZXJOYW1lICRTaGFyZVNlcnZlciAtQ291bnQgMSAtUXVpZXQpIC1lcSAkZmFsc2UpIHsNCiAgICAgICAgdGhyb3coIlNlcnZlciAnJFNoYXJlU2VydmVyJyBpcyB1bnJlYWNoYWJsZSB2aWEgSUNNUC4iKQ0KICAgIH0NCg0KICAgICRTZXNzaW9uID0gTmV3LVBTU2Vzc2lvbiAtQ29tcHV0ZXJOYW1lICRTaGFyZVNlcnZlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbA0KDQogICAgSW52b2tlLUNvbW1hbmQgLVNlc3Npb24gJFNlc3Npb24gLVNjcmlwdEJsb2NrIHsNCiAgICAgICAgICAgIHBhcmFtICgNCiAgICAgICAgICAgICAgICBbU3RyaW5nXSAkU2hhcmVQYXRoLA0KICAgICAgICAgICAgICAgIFtTdHJpbmddICRTaGFyZU5hbWUsDQogICAgICAgICAgICAgICAgW1N0cmluZ10gJENsdXN0ZXJBY2NvdW50DQogICAgICAgICAgICApDQoNCiAgICAgICAgICAgIE5ldy1JdGVtIC1QYXRoICRTaGFyZVBhdGggLUl0ZW1UeXBlIENvbnRhaW5lciAtRm9yY2UNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgTmV3LVNtYlNoYXJlIC1QYXRoICRTaGFyZVBhdGggYA0KICAgICAgICAgICAgICAgIC1OYW1lICRTaGFyZU5hbWUgYA0KICAgICAgICAgICAgICAgIC1GdWxsQWNjZXNzICIkQ2x1c3RlckFjY291bnQiIGANCiAgICAgICAgICAgICAgICAtRGVzY3JpcHRpb24gIlNoYXJlZCBmb2xkZXIgZm9yIEZhaWxvdmVyIENsdXN0ZXIuIg0KDQogICAgICAgIH0gLUFyZ3VtZW50TGlzdCAkU2hhcmVQYXRoLCAkU2hhcmVOYW1lLCAiJERvbWFpbk5hbWVcJENsdXN0ZXJOYW1lYCQiDQoNCiAgICBTZXQtQ2x1c3RlclF1b3J1bSAtTm9kZUFuZEZpbGVTaGFyZU1ham9yaXR5ICJcXCRTaGFyZVNlcnZlclwkU2hhcmVOYW1lIg0KfQ0KDQoNCg0KZnVuY3Rpb24gTmV3LUZhaWxvdmVyQ2x1c3RlciB7DQoJcGFyYW0gKA0KCQlbU3RyaW5nXSAkQ2x1c3Rlck5hbWUsDQoJCVtTdHJpbmddICRTdGF0aWNBZGRyZXNzLA0KCQlbU3RyaW5nW11dICRDbHVzdGVyTm9kZXMsDQogICAgICAgIFtTdHJpbmddICRVc2VyTmFtZSwNCiAgICAgICAgW1N0cmluZ10gJFVzZXJQYXNzd29yZCwNCiAgICAgICAgJENyZWRlbnRpYWwNCgkpDQoNCiAgICBpZiAoJENyZWRlbnRpYWwgLWVxICRudWxsKSB7DQogICAgICAgICRDcmVkZW50aWFsID0gTmV3LUNyZWRlbnRpYWwgLVVzZXJOYW1lICIkRG9tYWluTmFtZVwkVXNlck5hbWUiIC1QYXNzd29yZCAiJFVzZXJQYXNzd29yZCINCiAgICB9DQoNCiAgICBJbXBvcnQtTW9kdWxlIEZhaWxvdmVyQ2x1c3RlcnMNCg0KCWlmICgoR2V0LUNsdXN0ZXIgJENsdXN0ZXJOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlKSAtZXEgJG51bGwpIHsNCiAgICAgICAgV3JpdGUtTG9nICJDcmVhdGluZyBuZXcgY2x1c3RlciAnJENsdXN0ZXJOYW1lJyAuLi4iDQogICAgICAgIFN0YXJ0LVBvd2VyU2hlbGxQcm9jZXNzIC1Db21tYW5kIEAiDQpJbXBvcnQtTW9kdWxlIEZhaWxvdmVyQ2x1c3RlcnMNCk5ldy1DbHVzdGVyIC1OYW1lICckQ2x1c3Rlck5hbWUnIC1TdGF0aWNBZGRyZXNzICckU3RhdGljQWRkcmVzcycNCiJAIC1DcmVkZW50aWFsICRDcmVkZW50aWFsDQogICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzIDE1DQogICAgfQ0KICAgIGVsc2Ugew0KICAgICAgICBXcml0ZS1Mb2cgIkNsdXN0ZXIgJyRDbHVzdGVyTmFtZScgYWxyZWFkeSBleGlzdHMuIg0KICAgIH0NCg0KICAgIGZvcmVhY2ggKCROb2RlIGluICRDbHVzdGVyTm9kZXMpIHsNCiAgICAgICAgaWYgKChHZXQtQ2x1c3Rlck5vZGUgJE5vZGUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpIC1lcSAkbnVsbCkgew0KICAgICAgICAgICAgV3JpdGUtTG9nICJBZGRpbmcgbm9kZSAnJE5vZGUnIHRvIHRoZSBjbHVzdGVyICckQ2x1c3Rlck5hbWUnIC4uLiINCiAgICAgICAgICAgIFN0YXJ0LVBvd2VyU2hlbGxQcm9jZXNzIC1Db21tYW5kIEAiDQpJbXBvcnQtTW9kdWxlIEZhaWxvdmVyQ2x1c3RlcnMNCkFkZC1DbHVzdGVyTm9kZSAtQ2x1c3RlciAnJENsdXN0ZXJOYW1lJyAtTmFtZSAnJE5vZGUnDQoiQCAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbA0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgV3JpdGUtTG9nICJOb2RlICckTm9kZScgYWxyZWFkeSBhIHBhcnQgb2YgdGhlIGNsdXN0ZXIgJyRDbHVzdGVyTmFtZScuIg0KICAgICAgICB9DQogICAgfQ0KfQ0KDQoNCg0KPCMNCg0KIyBFeGFtcGxlDQoNCiREb21haW5OYW1lID0gJ2ZjLWFjbWUubG9jYWwnDQokRG9tYWluVXNlciA9ICdBZG1pbmlzdHJhdG9yJw0KJERvbWFpblBhc3N3b3JkID0gJ1BAc3N3MHJkJw0KDQokQ2x1c3Rlck5hbWUgPSAnZmMtdGVzdCcNCiRDbHVzdGVySVAgPSAnMTAuMjAwLjAuNjAnDQokQ2x1c3Rlck5vZGVzID0gQCgnZmMtbm9kZS0wMScsJ2ZjLW5vZGUtMDInLCdmYy1ub2RlLTAzJykNCg0KJFNoYXJlU2VydmVyID0gJ2ZjLWRjLTAxJw0KJFNoYXJlTmFtZSA9ICdGQ1NoYXJlJw0KDQokU2hhcmVQYXRoID0gIkM6XCRTaGFyZU5hbWUiDQoNCg0KDQpJbXBvcnQtTW9kdWxlIENvcmVGdW5jdGlvbnMgLUZvcmNlDQoNCiRDcmVkcyA9IE5ldy1DcmVkZW50aWFsIGANCiAgICAtVXNlck5hbWUgIiREb21haW5OYW1lXCREb21haW5Vc2VyIiBgDQogICAgLVBhc3N3b3JkICIkRG9tYWluUGFzc3dvcmQiDQoNCk5ldy1GYWlsb3ZlckNsdXN0ZXIgYA0KICAgIC1DbHVzdGVyTmFtZSAkQ2x1c3Rlck5hbWUgYA0KICAgIC1TdGF0aWNBZGRyZXNzICRDbHVzdGVySVAgYA0KICAgIC1DbHVzdGVyTm9kZXMgJENsdXN0ZXJOb2RlcyBgDQogICAgLUNyZWRlbnRpYWwgJENyZWRzDQoNCk5ldy1GYWlsb3ZlckNsdXN0ZXJTaGFyZWRGb2xkZXIgYA0KICAgIC1DbHVzdGVyTmFtZSAkQ2x1c3Rlck5hbWUgYA0KICAgIC1Eb21haW5OYW1lICREb21haW5OYW1lIGANCiAgICAtU2hhcmVTZXJ2ZXIgJFNoYXJlU2VydmVyIGANCiAgICAtU2hhcmVQYXRoICIkU2hhcmVQYXRoIiBgDQogICAgLVNoYXJlTmFtZSAiJFNoYXJlTmFtZSIgYA0KICAgIC1DcmVkZW50aWFsICRDcmVkcw0KDQojPg0K"
  ]
}